{"version":3,"sources":["Components/TestComponent2/index.js","Components/TestComponent/index.js","ExampleData/index.js","Functions/index.js","Components/Header/index.js","Components/DynamicComponent/index.js","Components/DropComponent/index.js","Components/SidePanel/index.js","Components/ListenerContainer/index.js","Components/MainBody/index.js","App.js","serviceWorker.js","index.js"],"names":["TestComponent2","id","style","message","options","className","TestComponent","data","rows","components","width","height","marginBottom","element","require","default","defaultStyle","defaultOptions","TestComponent1","configurationData","observers","emitChange","forEach","o","dropComponent","item","rowId","componentToMove","key","Date","getTime","find","row","push","Header","DynamicComponent","Element","componentData","DropComponent","component","useDrag","type","collect","monitor","isDragging","drag","cursor","opacity","ref","SidePanel","Object","values","map","ListenerContainer","elements","useDrop","accept","drop","dynamicElement","dynamicData","MainBody","App","useState","appData","setAppData","useEffect","newData","filter","t","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78fc019c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction TestComponent2({ id, style, options: { message } }) {\r\n  return (\r\n    <div className=\"Test-Component2\" id={id} style={style}>\r\n      <h4>{message || \"Title Element\"}</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestComponent2;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction TestComponent({ id, style, options: { message } }) {\r\n  return (\r\n    <div className=\"Test-Component\" id={id} style={style}>\r\n      {message || \"Welcome to the Jungle!\"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestComponent;\r\n","const data = {\r\n  rows: [\r\n    {\r\n      id: \"rowOne\",\r\n      components: [],\r\n      style: {\r\n        width: \"100%\",\r\n        height: \"fit-content\",\r\n        marginBottom: \"15px\"\r\n      }\r\n    },\r\n    {\r\n      id: \"rowTwo\",\r\n      components: [],\r\n      style: {\r\n        width: \"100%\",\r\n        height: \"fit-content\",\r\n        marginBottom: \"15px\"\r\n      }\r\n    },\r\n    {\r\n      id: \"rowThree\",\r\n      components: [],\r\n      style: {\r\n        width: \"100%\",\r\n        height: \"fit-content\",\r\n        marginBottom: \"15px\"\r\n      }\r\n    }\r\n  ],\r\n  components: {\r\n    TestComponent2: {\r\n      id: \"TestComponent2\",\r\n      element: require(\"../Components/TestComponent2\").default,\r\n      defaultStyle: {},\r\n      defaultOptions: {},\r\n      style: {},\r\n      options: {}\r\n    },\r\n    TestComponent1: {\r\n      id: \"TestComponent1\",\r\n      element: require(\"../Components/TestComponent\").default,\r\n      defaultStyle: {\r\n        marginBottom: \"15px\"\r\n      },\r\n      defaultOptions: {\r\n        message: \"Paragraph component\"\r\n      },\r\n      style: {},\r\n      options: {}\r\n    }\r\n  }\r\n};\r\n\r\nexport default data;\r\n","import data from \"./../ExampleData\";\r\n\r\nlet configurationData = { ...data };\r\n\r\nlet observers = [];\r\n\r\nfunction emitChange() {\r\n  observers.forEach(o => o && o(configurationData));\r\n}\r\n\r\nexport function observe(o) {\r\n  observers.push(o);\r\n  emitChange();\r\n  return () => {\r\n    observers = observers.filter(t => t !== o);\r\n  };\r\n}\r\n\r\nexport const dropComponent = (item, rowId) => {\r\n  const { id } = item;\r\n  const componentToMove = { ...configurationData.components[id] };\r\n  componentToMove.key = new Date().getTime();\r\n  const rowToEdit = configurationData.rows.find(row => row.id === rowId);\r\n  rowToEdit.components.push(componentToMove);\r\n  configurationData = { ...configurationData };\r\n  emitChange();\r\n};\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction Header({ message }) {\r\n  return (\r\n    <header className=\"App-Header\">\r\n      <div className=\"Header-Content\">{message}</div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nfunction DynamicComponent({ element: Element, id, style, options }) {\r\n  const componentData = { id, style, options };\r\n  return <Element {...componentData} />;\r\n}\r\n\r\nexport default DynamicComponent;\r\n","import React from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport \"./index.css\";\r\nimport DynamicComponent from \"../DynamicComponent\";\r\n\r\nfunction DropComponent({ component }) {\r\n  const { defaultOptions: options, defaultStyle: style, id } = component;\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: { type: \"ALL\", id },\r\n    collect: monitor => ({\r\n      isDragging: !!monitor.isDragging()\r\n    })\r\n  });\r\n  return (\r\n    <div\r\n      className=\"Drop-Component\"\r\n      style={{ cursor: \"move\", opacity: isDragging ? \"0.5\" : \"1\" }}\r\n      ref={drag}\r\n    >\r\n      <DynamicComponent {...component} options={options} style={style} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropComponent;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport DropComponent from \"../DropComponent\";\r\n\r\nfunction SidePanel({ components }) {\r\n  return (\r\n    <div className=\"Side-Panel\">\r\n      {Object.values(components).map(component => (\r\n        <DropComponent component={component} key={component.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidePanel;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport \"./index.css\";\r\nimport DynamicComponent from \"../DynamicComponent\";\r\nimport { dropComponent } from \"./../../Functions\";\r\n\r\nfunction ListenerContainer({ style, elements, components, id }) {\r\n  const [, drop] = useDrop({\r\n    accept: \"ALL\",\r\n    drop: item => dropComponent(item, id)\r\n  });\r\n  return (\r\n    <div ref={drop} className=\"Listener-Container\" style={style}>\r\n      {elements.components.map(component => {\r\n        const dynamicElement = components[component.id];\r\n        const dynamicData = {\r\n          ...dynamicElement,\r\n          options: {\r\n            ...dynamicElement.defaultOptions,\r\n            ...component.options\r\n          },\r\n          style: {\r\n            ...dynamicElement.defaultStyle,\r\n            ...component.style\r\n          }\r\n        };\r\n        return <DynamicComponent {...dynamicData} key={component.key} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListenerContainer;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport ListenerContainer from \"../ListenerContainer\";\r\n\r\nfunction MainBody({ data: { rows, components } }) {\r\n  return (\r\n    <div className=\"Main-Body\">\r\n      {rows.map(elements => (\r\n        <ListenerContainer\r\n          id={elements.id}\r\n          style={elements.style}\r\n          elements={elements}\r\n          components={components}\r\n          key={elements.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainBody;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport \"./App.css\";\r\nimport { observe } from \"./Functions\";\r\nimport Header from \"./Components/Header\";\r\nimport SidePanel from \"./Components/SidePanel\";\r\nimport MainBody from \"./Components/MainBody\";\r\n\r\nimport data from \"./ExampleData\";\r\n\r\nfunction App() {\r\n  const [appData, setAppData] = useState(data);\r\n  useEffect(() => observe(newData => setAppData(newData)));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header message=\"Welcome to drag-n-drop\" />\r\n      <DndProvider backend={HTML5Backend}>\r\n        <SidePanel components={appData.components} />\r\n        <MainBody data={appData} />\r\n      </DndProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}